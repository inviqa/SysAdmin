#!/bin/bash
function _echo() {
  echo -e "\033[1m\n${1}\n\033[0m";
  tput sgr0;
}
function _get_variables() {
  # first set the script defauls

  SERVICE_ENABLE='';
  SUDO_ENABLE=false;
  SYSTEM_PROXY_ENABLE=false;
  SOCKSPROXY_REMOTE_SERVER='';
  SOCKSPROXY_LOCAL_SERVER='localhost';
  SOCKSPROXY_PORT='8080';
  NETWORK_SERVICE='Ethernet';

  local VERBOSE=false;
  local USER_CONFIGS="${HOME}/.socksproxyrc";
  # SERVICE_ENABLE='on';
  # SOCKSPROXY_REMOTE_SERVER='remote_server_name_or_ip';
  # SOCKSPROXY_REMOTE_SERVER_PORT='8080';
  # SOCKSPROXY_LOCAL_SERVER='localhost';
  # SOCKSPROXY_LOCAL_SERVER_port='8080';
  # NETWORK_SERVICE='Ethernet';

  # the checks if the user has it's own defaults
  if [ -f "${USER_CONFIGS}" ]; then
    # shellcheck source=$HOME/.socksproxyrc
    # shellcheck disable=SC1091
    source "${USER_CONFIGS}"
  fi

  # then checks if any inline parameters are passed to override the defauts
  while [[ "${#}" -gt 0 ]]; do
    option="${1}";
    case $option in
      -v|--verbose)
        VERBOSE=true;
      ;;
      --sudo)
        SUDO_ENABLE=true;
      ;;
      --enable)
        SERVICE_ENABLE="on";
      ;;
      --disable)
        SERVICE_ENABLE="off";
      ;;
      --system-proxy)
        SYSTEM_PROXY_ENABLE=true;
      ;;
      -r|--remote)
        SOCKSPROXY_REMOTE_SERVER="${2}";
        shift
      ;;
      -l|--local)
        SOCKSPROXY_LOCAL_SERVER="${2}";
        shift
      ;;
      -p|--port)
        SOCKSPROXY_PORT="${2}";
        shift
      ;;
      -n|--network)
        NETWORK_SERVICE="${2}";
        shift
       #"Wi-Fi"
       #"Ethernet 1"
       #"iPhone USB"
      ;;
      *)
      # unknown option
      _echo "UNKNOWN PARAMETER: == ${1} =="
      return 1
      ;;
  esac
    #evaluate the next PARAMETER
    shift
  done

  if ${VERBOSE} ; then
    _print_paramaters;
  fi
}

function _print_paramaters() {
  _echo "SUDO_ENABLE: ${SUDO_ENABLE}
SERVICE_ENABLE: ${SERVICE_ENABLE}
SOCKSPROXY_REMOTE_SERVER: ${SOCKSPROXY_REMOTE_SERVER}
SOCKSPROXY_LOCAL_SERVER: ${SOCKSPROXY_LOCAL_SERVER}
SOCKSPROXY_PORT: ${SOCKSPROXY_PORT}
SYSTEM_PROXY_ENABLE: ${SYSTEM_PROXY_ENABLE}
NETWORK_SERVICE: ${NETWORK_SERVICE}";
}

function _remoteproxy_connect() {
  local SSH_COMMAND="ssh -f -N -T -M ${SOCKSPROXY_REMOTE_SERVER} -D ${SOCKSPROXY_PORT}"
  eval "$SSH_COMMAND" > /dev/null 2>&1
  _echo "CONNECTED TO ${SOCKSPROXY_REMOTE_SERVER} PROXY SERVER ON PORT ${SOCKSPROXY_PORT}";
}
function _remoteproxy_disconnect() {
  # requires
  # ControlPath ~/.ssh/xxxxx.ctl
  # in .ssh/config

  local SSH_COMMAND="ssh -T -O 'exit' ${SOCKSPROXY_REMOTE_SERVER}"
  eval "${SSH_COMMAND}" > /dev/null 2>&1
  _echo "PROXY SERVER DISCONNECTED";
}
function _socksfirewallproxy_activate() {
  #with parameters passed
  local COMMAND="networksetup -setsocksfirewallproxy ${NETWORK_SERVICE} ${SOCKSPROXY_LOCAL_SERVER} ${SOCKSPROXY_PORT}"
  eval "${SUDO}" "${COMMAND}"
  _echo "SYSTEM PROXY ENABLED"
}
function _socksfirewallproxy_deactivate() {
  local COMMAND="networksetup -setsocksfirewallproxystate ${NETWORK_SERVICE} off"
  eval "${SUDO}" "${COMMAND}"
  _echo "SYSTEM PROXY DISABLED"
}

function manage_proxy() {

  if ! _get_variables "${@}" ; then
    # brakes the execution if some unknown parameters are detected
    # therefore _get_variables has returned "1"
    _echo "OPERATION ABORTED";
    exit 1
  fi
  if $SUDO_ENABLE;then
    SUDO="sudo"
  fi
  if [[  "${SERVICE_ENABLE}" == "on" ]]; then
    _remoteproxy_connect;
    if $SYSTEM_PROXY_ENABLE; then
      _socksfirewallproxy_activate;
    fi
  elif [[ "${SERVICE_ENABLE}" == "off" ]]; then
    if $SYSTEM_PROXY_ENABLE; then
      _socksfirewallproxy_deactivate;
    fi
    _remoteproxy_disconnect;
  fi

}

manage_proxy "${@}";
